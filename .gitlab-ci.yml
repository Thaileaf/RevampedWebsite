# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest
stages:
  - build
  - analysis
# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/#cache
cache:
  paths:
    - node_modules/

test_build:
  stage: build

  script:
    - npm ci
    - npx next lint
    - npx next build

sonar_scan:
  stage: analysis
  image: sonarsource/sonar-scanner-cli

  script:
    - |
      echo "Waiting for SonarQube service to start..."
      retries=10
      interval=20
      timeout=15
      count=0
      while [[ $count -lt $retries ]]; do 
          if curl -f http://sonarqube:9000/api/system/status | tee /dev/stderr  | grep -q '"status":"UP"'; then # Tee is to debug
              echo "Sonar Qube server healthy"
              break
          fi
          
          echo "Waiting for server to start"
          sleep $interval
          count=$((count + 1))
      done
      if [[ $count -ge $retries ]]; then
          echo "Whoopdie doo sonarqube couldnt start sorry"
          exit 1
      fi

      sleep 5

      echo "Grabbing token from sonarqube"
      export SONAR_TOKEN=$(curl -v --request POST \
      --url "http://sonarqube:9000/api/user_tokens/generate" \
      --user 'admin:admin' \
      --data 'name=My Token' | \
      grep -oP '"token":"\K[^"]*')

      echo "TOKEN is $SONAR_TOKEN"

      if [[ -z $SONAR_TOKEN ]]; then
          echo "No token detected"
          exit 1
      fi

    - |
      sonar-scanner \
          -Dsonar.host.url=http://sonarqube:9000 \
          -Dsonar.projectKey=revamped-website \
          -Dsonar.projectBaseDir=${CI_PROJECT_DIR}

    - |
      echo "Fetching SonarQube issues report..."
      curl -u "$SONAR_TOKEN:" \
      "http://sonarqube:9000/api/issues/search?projectKey=revamped-website" \
      -o gl-sast-sonar-report.json

  services:
    - name: sonarqube:community
      alias: sonarqube

  artifacts:
    paths:
      - gl-sast-sonar-report.json
    when: always # Collect artifact even if the job fails (e.g., quality gate failure)
# test_db:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/db-postgres.spec.js
# sawe
# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
