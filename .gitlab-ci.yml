
image: node:latest


stages:
  - build
  - analysis
  - megalint

cache:
  paths:
    - node_modules/

test_build:
  stage: build

  script:
    - npm ci
    - npx next lint
    - npx next build

sonar_scan:
  stage: analysis
  image: sonarsource/sonar-scanner-cli

  script:
    - |
      echo "Waiting for SonarQube service to start..."
      retries=10
      interval=20
      timeout=15
      count=0
      while [[ $count -lt $retries ]]; do 
          if curl -f http://sonarqube:9000/api/system/status | tee /dev/stderr  | grep -q '"status":"UP"'; then # Tee is to debug
              echo "Sonar Qube server healthy"
              break
          fi
          
          echo "Waiting for server to start"
          sleep $interval
          count=$((count + 1))
      done
      if [[ $count -ge $retries ]]; then
          echo "Whoopdie doo sonarqube couldnt start sorry"
          exit 1
      fi

      sleep 5

      echo "Grabbing token from sonarqube"
      export SONAR_TOKEN=$(curl -v --request POST \
      --url "http://sonarqube:9000/api/user_tokens/generate" \
      --user 'admin:admin' \
      --data 'name=My Token' | \
      grep -oP '"token":"\K[^"]*')


      if [[ -z $SONAR_TOKEN ]]; then
          echo "No token detected"
          exit 1
      fi

    - |
      sonar-scanner \
          -Dsonar.host.url=http://sonarqube:9000 \
          -Dsonar.projectKey=revamped-website \
          -Dsonar.projectBaseDir=${CI_PROJECT_DIR}

    - |
      echo "Waiting for SonarQube to finish processing"

      count=0
      retries=5
      timeout=30
      analysis_complete=false
      while [[ $count -lt $retries ]]; do
        if curl -f -u "$SONAR_TOKEN:" "http://sonarqube:9000/api/ce/component?component=revamped-website" | tee /dev/stderr | grep -q '"status":"SUCCESS"'; then
          echo "Server finished processing"
          analysis_complete=true
          break
        fi
        count=$((count + 1))
        echo "Still waiting for analysis"
        sleep $timeout
        
      done

      if [[ "$analysis_complete" = false ]]; then
        echo "Analysis failed"
        exit 1

      fi


      echo "Fetching SonarQube issues report..."
      curl -u "$SONAR_TOKEN:" \
      "http://sonarqube:9000/api/issues/search?projectKey=revamped-website" \
      -o gl-sast-sonar-report.json

  services:
    - name: sonarqube:community
      alias: sonarqube

  artifacts:
    paths:
      - gl-sast-sonar-report.json
    when: always 


# MegaLinter GitLab CI job configuration file
# More info at https://megalinter.io/

mega-linter:
  stage: megalint
  # You can override MegaLinter flavor used to have faster performances
  # More info at https://megalinter.io/flavors/
  image: oxsecurity/megalinter:v8
  script: [ "true" ] # if script: ["true"] doesn't work, you may try ->  script: [ "/bin/bash /entrypoint.sh" ]
  variables:
    # All available variables are described in documentation
    # https://megalinter.io/configuration/
    DEFAULT_WORKSPACE: $CI_PROJECT_DIR
    ADDITIONAL_EXCLUDED_DIRECTORIES: "node_nodules .git public"
  artifacts:
    when: always
    paths:
      - megalinter-reports
    expire_in: 1 week
